{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/getGifs.jsx","components/GifGrid.jsx","hooks/useFetchGifs.jsx","GifExpertApp.jsx","index.jsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","categoryClean","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMA6BeA,EA1BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAezC,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,QCIZG,EATK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNGK,EAAO,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,6DACfC,EAAgBC,UAAUH,GACpB,mCACNL,EAHe,iDAGiCO,EAHjC,6BAET,oCAFS,SAIFE,MAAMT,GAJJ,cAIfU,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRjB,MAAOgB,EAAIhB,MACXC,IAAG,UAAEe,EAAIE,cAAN,aAAE,EAAYC,iBAAiBlB,QAXjB,kBAeda,GAfc,4CAAH,sDC4BLM,EAvBC,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACdpB,mBAAS,CACjC2B,KAAM,GACNQ,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRnB,EAAQC,GAAUmB,MAAK,SAACC,GACtBH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAGZ,CAACf,IAEGgB,EDZ2BK,CAAarB,GAAjCY,EADkB,EACxBL,KAAcQ,EADU,EACVA,QAEtB,OACE,qCACE,oBAAInB,UAAU,yCAAd,SAAwDI,IACvDe,GAAW,mBAAGnB,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SACE,6BACGgB,EAAOH,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,eEMnBW,EAlBM,WAAO,IAAD,EACW1C,mBAAS,CAAC,cADrB,mBAClBQ,EADkB,KACNT,EADM,KAGzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACGS,EAAWqB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCTxBuB,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.3558204a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [inputValue, ...categories]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","import React from \"react\";\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className='card animate__animated animate__fadeIn'>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","export const getGifs = async (category) => {\n  const categoryClean = encodeURI(category);\n  const key = \"Z4TcDFzFAaZVEl2Np9JGxAR3qWQuouC3\";\n  const url = `https://api.giphy.com/v1/gifs/search?q=${categoryClean}&limit=10&api_key=${key}`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport GifGridItem from \"./GifGridItem\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className='card animate__animated animate__fadeIn'>{category}</h3>\n      {loading && <p className='animate__animated animate__flash'>Loading</p>}\n\n      <div className='card-grid'>\n        <ol>\n          {images.map((img) => (\n            <GifGridItem key={img.id} {...img} />\n          ))}\n        </ol>\n      </div>\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"One punch\"]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category}></GifGrid>\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}